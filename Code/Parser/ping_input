type PongerSession = Pinger ?? ping(Unit) . Pinger ! pong(Unit) . ##Pinger
type PingerSession = Ponger !! ping(Unit) . Ponger ? pong(Unit) . #Ponger . end
actor PingerActor follows (PingerSession) {
    let pid <= discover PongerSession in
    connect ping(()) to pid as Ponger;
    receive from Ponger {
        pong(()) -> wait Ponger
    }
}
actor PongerActor follows (PongerSession) {
    accept from Pinger {
        ping(()) ->
            send pong(()) to Pinger;
            disconnect from Pinger
    }
}
Ponger : PongerSession
boot {
    new PingerActor;
    new PongerActor
}