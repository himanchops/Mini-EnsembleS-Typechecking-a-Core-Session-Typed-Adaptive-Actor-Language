Technology is evolving faster than ever as each technological improvement creates a stronger generation of technologies at a faster rate, leading to the rapid growth of heterogeneous hardware devices and distributed systems. Software systems and applications must be able to adapt to their execution surroundings in order to make best use of their resources.

Dynamic self-adaptation is a systems concept that allows devices to discover, connect and communicate with other software components at runtime. The shared-nothing semantics and explicit message passing of the actor model of computation provide a pertinent structure of programming such adaptive systems. Ensemble is an imperative actor-based concurrent programming language that supports software adaptation. However, Ensemble is vulnerable to concurrency errors such as deadlocks and communication mismatches. Multiparty session types (MPST) are used to describe communication protocols involving any number of participants, preventing errors and guaranteeing its correctness. This is achieved by ensuring each actor conforms to a predefined communication protocol and that the protocol is well-formed and valid according to MPST theory.

EnsembleS is a new session-typed actor-based language based on Ensemble, introducing the concepts of MPST to support compile-time verification of safe runtime adaptation. The project aims to implement a typechecker for a smaller core language based on the formal model of EnsembleS, which can then be used for experimenting and further extensions. The implementation is evaluated by applying it to different case studies such as a Ping-Pong scheme, a Bookstore and an adaptive DNS server.