There is a language called Ensemble which supports software adaptation. The core idea behind Ensemble is that the actor model (with its addressable processes, no shared memory, etc) is a good fit for these systems
Ensemble on its own is susceptible to concurrency errors such as deadlocks and communication mismatches
Multiparty session types allow people to specify communication patterns upfront, and guarantee communication correctness
Paul, Ornela, Simon, and myself added MPSTs to Ensemble to produce EnsembleS and did a formal model of it. The implementation was a bit ugly in places because we were adding to an existing language, and the formalism gets the ideas across more clearly
Your project implements a typechecker for the core formal model. This gives us a much cleaner language design, and a basis for experimenting with extensions



MULTIPARTY SESSION TYPES FOR SAFE RUNTIME ADAPTATION IN AN ACTOR LANGUAGE
Human fallibility, unpredictable operating environments, and the heterogeneity of hardware devices are driving the need for software to be able to adapt as seen in the Internet of Things or telecommunication networks. Unfortunately, mainstream programming languages do not readily allow a software component to sense and respond to its operating environment, by discovering, replacing, and communicating with components that are not part of the original system design, while maintaining static correctness guarantees. In particular, if a new component is discovered at runtime, there is no guarantee that its communication behaviour is compatible with existing components. We address this problem by using multiparty session types with explicit connection actions, a type formalism used to model distributed communication protocols. By associating session types with software components, the discovery process can check protocol compatibility and, when required, correctly replace components without jeopardising safety. We present the design and implementation of EnsembleS, the first actor-based language with adaptive features and a static session type system, and apply it to a case study based on an adaptive DNS server. We formalise the type system of EnsembleS and prove the safety of well-typed programs, making essential use of recent advances in non-classical multiparty session types.


ADAPTABLE ACTORS
The combination of improved battery technology and more power-efficient computing hardware has led to the proliferation of heterogeneous distributed systems. This internet of things consists of embedded, wearable, hobbyist, parallel, and commodity devices. Given the different resource and power constraints of such systems, applications must be able to reconfigure or adapt their runtime execution environment in order to make best use of the resources available. In order for the underlying operating system/runtime to support run-time adaptation, an application must be suitably designed. The actor model of computation presents a natural fit for programming such adaptive systems with shared-nothing semantics and use of message passing. This paper addresses the limitations of current actor approaches and argues that an actor is the appropriate unit of adaptation. This is justified through experimentation across heterogeneous platforms.